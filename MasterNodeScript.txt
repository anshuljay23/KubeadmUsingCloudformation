PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
if [ -z "$PUBLIC_IP" ]; then
 echo "Failed to fetch public IP address."
 echo "Failed to fetch public IP address." > /tmp/public_ip_error.log  # Log the error to a file
 exit 1  # Exit if public IP is not available
else
 echo "Public IP is: $PUBLIC_IP"
 echo "$PUBLIC_IP" > /tmp/public_ip.log  # Save the public IP to a file
fi
sudo hostnamectl set-hostname $(curl -s http://169.254.169.254/latest/meta-data/local-hostname)


cat <<EOF > /tmp/kubeadm-config.yaml
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
apiServer:
 certSANs:
   - 127.0.0.1
   - ${PUBLIC_IP}
 extraArgs:
   bind-address: "0.0.0.0"
   cloud-provider: external
clusterName: kubernetes
scheduler:
 extraArgs:
   bind-address: "0.0.0.0"
controllerManager:
 extraArgs:
   bind-address: "0.0.0.0"
   cloud-provider: external
networking:
 podSubnet: "10.244.0.0/16"
 serviceSubnet: "10.96.0.0/12"
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
nodeRegistration:
 name: $(curl -s http://169.254.169.254/latest/meta-data/local-hostname)
 kubeletExtraArgs:
   cloud-provider: external
EOF
sudo kubeadm init --config /tmp/kubeadm-config.yaml
sudo export KUBECONFIG=/etc/kubernetes/admin.conf
sudo mkdir -p $HOME/.kube
sudo sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
sudo git clone https://github.com/kubernetes/cloud-provider-aws.git
cd cloud-provider-aws/examples/existing-cluster/base
sudo kubectl create -k .
sudo kubeadm token create --print-join-command
sudo su
